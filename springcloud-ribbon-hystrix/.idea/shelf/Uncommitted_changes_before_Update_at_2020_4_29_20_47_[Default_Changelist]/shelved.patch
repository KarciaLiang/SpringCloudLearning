Index: ../springcloud-sleuth-zipkin/springcloud-app-order/src/main/resources/application-rabbitmq.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\r\n  zipkin:\r\n    #发送数据类型 kafaka、rabbitmq、web\r\n    sender:\r\n      type: rabbit\r\n  sleuth:\r\n    #全部采集,默认的采样比例为: 0.1(即10%),1.0则表示全部采集\r\n    sampler:\r\n      probability: 1.0\r\n    web:\r\n      enabled: true\r\n  #rabbitmq配置\r\n  rabbitmq:\r\n    host: localhost\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n    listener: # 这里配置了重试策略\r\n      direct:\r\n        retry:\r\n          enabled: true\r\n      simple:\r\n        retry:\r\n          enabled: true\r\n\r\n\r\n  ###======pom.xml需增加rabbitmq依赖如下=======##\r\n  #    <dependency>\r\n  #    <groupId>org.springframework.amqp</groupId>\r\n  #    <artifactId>spring-rabbit</artifactId>\r\n  #    </dependency>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-sleuth-zipkin/springcloud-app-order/src/main/resources/application-rabbitmq.yml	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-sleuth-zipkin/springcloud-app-order/src/main/resources/application-rabbitmq.yml	(date 1585984211504)
@@ -23,7 +23,6 @@
         retry:
           enabled: true
 
-
   ###======pom.xml需增加rabbitmq依赖如下=======##
   #    <dependency>
   #    <groupId>org.springframework.amqp</groupId>
Index: ../springcloud-sleuth-zipkin/springcloud-app-member/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>##=========服务提供者-会员服务配置========\r\n#服务端口号\r\nserver:\r\n  port: 8765\r\n#定义服务名称(服务注册到eureka名称)\r\nspring:\r\n  application:\r\n    name: app-thinkingcao-member\r\n  #zipkin服务端地址(sleuth-cli收集信息后通过http传输到zinkin-server)\r\n  zipkin:\r\n    base-url: http://127.0.0.1:9411/\r\n    #设置成false,表示这只是一个URL地址而不是服务名称（nacos与zipkin一起使用时可能出现此问题）\r\n    #discoveryClientEnabled: false\r\n    #发送数据类型 kafaka、rabbitmq、web\r\n    sender:\r\n      type: WEB\r\n  #全部采集,默认的采样比例为: 0.1(即10%),1.0则表示全部采集\r\n  sleuth:\r\n    sampler:\r\n      probability: 1.0\r\n\r\n#在此指定服务注册中心地址，将当前会员服务注册到eureka注册中心上\r\neureka:\r\n  client:\r\n    service-url:\r\n      defaultZone: http://127.0.0.1:8000/eureka\r\n    #启动注册操作，该值默认为true。若设置为fasle将不会启动注册操作。是否需要去检索寻找服务，默认是true\r\n    register-with-eureka: true\r\n    #是否需要从eureka上获取注册信息\r\n    fetch-registry: true\r\n\r\n  ##心跳检测与续约时间（测试环境和本地开发环境将值设置小一点，保证服务关闭后，注册中心能够及时踢出）\r\n  instance:\r\n    #客户端向Eureka注册中心发送心跳的时间间隔，单位为秒（默认为30s）,（客户端会按照此规则向Eureka服务端发送心跳检测包）\r\n    lease-renewal-interval-in-seconds: 2\r\n    #Eureka注册中心在收到客户端最后一次心跳之后等待的时间上限，单位为秒（默认为90s），超过时间则剔除（客户端会按照此规则向Eureka服务端发送心跳检测包）\r\n    lease-expiration-duration-in-seconds: 2\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-sleuth-zipkin/springcloud-app-member/src/main/resources/application.yml	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-sleuth-zipkin/springcloud-app-member/src/main/resources/application.yml	(date 1585990458899)
@@ -14,6 +14,7 @@
     #发送数据类型 kafaka、rabbitmq、web
     sender:
       type: WEB
+
   #全部采集,默认的采样比例为: 0.1(即10%),1.0则表示全部采集
   sleuth:
     sampler:
Index: ../springcloud-zuul/springcloud-zuul_gateway/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-zuul/springcloud-zuul_gateway/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-zuul/springcloud-zuul_gateway/.mvn/wrapper/MavenWrapperDownloader.java	(date 1583126119458)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-feign/springcloud-app-member/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>##=========服务提供者-会员服务配置========\r\n#服务端口号\r\nserver:\r\n  port: 8762\r\n#定义服务名称(服务注册到eureka名称)\r\nspring:\r\n  application:\r\n    name: app-thinkingcao-member\r\n#在此指定服务注册中心地址，将当前会员服务注册到eureka注册中心上\r\neureka:\r\n  client:\r\n    service-url:\r\n      defaultZone: http://127.0.0.1:8000/eureka\r\n    #启动注册操作，该值默认为true。若设置为fasle将不会启动注册操作。是否需要去检索寻找服务，默认是true\r\n    register-with-eureka: true\r\n    #是否需要从eureka上获取注册信息\r\n    fetch-registry: true\r\n\r\n  ##心跳检测与续约时间（测试环境和本地开发环境将值设置小一点，保证服务关闭后，注册中心能够及时踢出）\r\n  instance:\r\n    #客户端向Eureka注册中心发送心跳的时间间隔，单位为秒（默认为30s）,（客户端会按照此规则向Eureka服务端发送心跳检测包）\r\n    lease-renewal-interval-in-seconds: 2\r\n    #Eureka注册中心在收到客户端最后一次心跳之后等待的时间上限，单位为秒（默认为90s），超过时间则剔除（客户端会按照此规则向Eureka服务端发送心跳检测包）\r\n    lease-expiration-duration-in-seconds: 2\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-feign/springcloud-app-member/src/main/resources/application.yml	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-feign/springcloud-app-member/src/main/resources/application.yml	(date 1582384173181)
@@ -10,7 +10,7 @@
 eureka:
   client:
     service-url:
-      defaultZone: http://127.0.0.1:8000/eureka
+      defaultZone: http://127.0.0.1:9000/eureka
     #启动注册操作，该值默认为true。若设置为fasle将不会启动注册操作。是否需要去检索寻找服务，默认是true
     register-with-eureka: true
     #是否需要从eureka上获取注册信息
Index: ../springcloud-sleuth-zipkin/springcloud-app-member/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <!--SpringBoot依赖版本-->\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/>\r\n    </parent>\r\n\r\n    <groupId>com.thinkingcao</groupId>\r\n    <artifactId>springcloud-app-member</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud-app-member</name>\r\n    <description>SpringCloud整合Eureka组件之注册服务消费者</description>\r\n\r\n    <!--项目编码、jdk版本、SpringCloud版本定义-->\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>\r\n    </properties>\r\n\r\n    <!--声明管理SpringCloud版本依赖信息-->\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <dependencies>\r\n        <!-- SpringBootWeb组件 -->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <!-- springcloud整合eureka客户端组件   -->\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n        </dependency>\r\n        <!-- springcloud sleuth整合zipkin客户端组件   -->\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-zipkin</artifactId>\r\n        </dependency>\r\n           <dependency>\r\n            <groupId>org.springframework.amqp</groupId>\r\n            <artifactId>spring-rabbit</artifactId>\r\n            </dependency>\r\n    </dependencies>\r\n\r\n    <!--maven插件-->\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-sleuth-zipkin/springcloud-app-member/pom.xml	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-sleuth-zipkin/springcloud-app-member/pom.xml	(date 1585990439503)
@@ -54,10 +54,12 @@
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-zipkin</artifactId>
         </dependency>
-           <dependency>
+
+        <dependency>
             <groupId>org.springframework.amqp</groupId>
             <artifactId>spring-rabbit</artifactId>
-            </dependency>
+        </dependency>
+
     </dependencies>
 
     <!--maven插件-->
Index: ../springcloud-zookeeper/springcloud-zookeeper-provider/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-zookeeper/springcloud-zookeeper-provider/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-zookeeper/springcloud-zookeeper-provider/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582528767159)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-feign/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-feign/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-feign/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582362470425)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-zookeeper/springcloud-feign-consumer/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-zookeeper/springcloud-feign-consumer/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-zookeeper/springcloud-feign-consumer/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582528767057)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-hystrix/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-hystrix/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-hystrix/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582609107716)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-eureka/springcloud-eureka-server/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-eureka/springcloud-eureka-server/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-eureka/springcloud-eureka-server/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582129994860)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-consul/springcloud-consul-provider/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-consul/springcloud-consul-provider/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-consul/springcloud-consul-provider/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582455343880)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-feign/springcloud-feign-client/src/main/java/com/thinkingcao/api/controller/ApiOrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.thinkingcao.api.controller;\r\n\r\nimport com.thinkingcao.api.Feign.IFeignClientService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @desc:\r\n * @author: cao_wencao\r\n * @date: 2020-02-22 12:30\r\n */\r\n@RestController\r\npublic class ApiOrderController {\r\n\r\n    @Autowired(required=false)\r\n    private IFeignClientService feignClientService;\r\n\r\n    @RequestMapping(value = \"/getMemberInfo\",method = RequestMethod.GET)\r\n    public String getMemberInfo(@RequestParam(\"userName\") String userName){\r\n        String memberInfo = feignClientService.getOrderToMemberInfo(userName);\r\n        return memberInfo;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-feign/springcloud-feign-client/src/main/java/com/thinkingcao/api/controller/ApiOrderController.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-feign/springcloud-feign-client/src/main/java/com/thinkingcao/api/controller/ApiOrderController.java	(date 1582366376175)
@@ -18,8 +18,8 @@
     @Autowired(required=false)
     private IFeignClientService feignClientService;
 
-    @RequestMapping(value = "/getMemberInfo",method = RequestMethod.GET)
-    public String getMemberInfo(@RequestParam("userName") String userName){
+    @RequestMapping(value = "/getOrderToMemberInfo",method = RequestMethod.GET)
+    public String getOrderToMemberInfo(@RequestParam("userName") String userName){
         String memberInfo = feignClientService.getOrderToMemberInfo(userName);
         return memberInfo;
     }
Index: ../springcloud-feign/springcloud-feign-client/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>##=========服务消费者-订单服务配置========\r\n#服务端口号\r\nserver:\r\n  port: 8787\r\n#定义服务名称(服务注册到eureka名称)\r\nspring:\r\n  application:\r\n    name: app-thinkingcao-feign\r\n#在此指定服务注册中心地址，将当前订单服务注册到eureka注册中心上\r\neureka:\r\n  client:\r\n    service-url:\r\n      defaultZone: http://127.0.0.1:8000/eureka\r\n    #启动注册操作，该值默认为true。若设置为fasle将不会启动注册操作。是否需要去检索寻找服务，默认是true\r\n    register-with-eureka: true\r\n    #是否需要从eureka上获取注册信息\r\n    fetch-registry: true\r\n    #表示eureka client间隔多久去拉取服务器注册信息,默认为30秒\r\n    registry-fetch-interval-seconds: 10\r\n\r\n  ##心跳检测与续约时间（测试环境和本地开发环境将值设置小一点，保证服务关闭后，注册中心能够及时踢出）\r\n  instance:\r\n    #客户端向Eureka注册中心发送心跳的时间间隔，单位为秒（默认为30s）,（客户端会按照此规则向Eureka服务端发送心跳检测包）\r\n    lease-renewal-interval-in-seconds: 2\r\n    #Eureka注册中心在收到客户端最后一次心跳之后等待的时间上限，单位为秒（默认为90s），超过时间则剔除（客户端会按照此规则向Eureka服务端发送心跳检测包）\r\n    lease-expiration-duration-in-seconds: 2\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-feign/springcloud-feign-client/src/main/resources/application.yml	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-feign/springcloud-feign-client/src/main/resources/application.yml	(date 1582384163538)
@@ -10,7 +10,7 @@
 eureka:
   client:
     service-url:
-      defaultZone: http://127.0.0.1:8000/eureka
+      defaultZone: http://127.0.0.1:9000/eureka
     #启动注册操作，该值默认为true。若设置为fasle将不会启动注册操作。是否需要去检索寻找服务，默认是true
     register-with-eureka: true
     #是否需要从eureka上获取注册信息
Index: ../springcloud-eureka/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-eureka/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-eureka/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582129994701)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-consul/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-consul/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-consul/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582455343929)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-feign/springcloud-feign-client/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-feign/springcloud-feign-client/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-feign/springcloud-feign-client/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582362470480)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud-apollo/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-apollo/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-apollo/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582610540970)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud_nacos_provider/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud_nacos_provider/src/main/resources/bootstrap.yml	(date 1586746059935)
+++ ../springcloud_nacos_provider/src/main/resources/bootstrap.yml	(date 1586746059935)
@@ -0,0 +1,21 @@
+spring:
+  application:
+    #对应Nacos Config中的Data ID，不是指服务名，实际服务应用名称以配置中心文件为准
+    name: nacos-config-provider
+  cloud:
+    nacos:
+      discovery:
+        #Nacos注册中心地址
+        server-addr: 127.0.0.1:8848 #,127.0.0.1:8849,127.0.0.1:8850
+        enabled: true
+      config:
+        #Nacos配置中心地址
+        server-addr: 127.0.0.1:8848 #,127.0.0.1:8849,127.0.0.1:8850
+        #分组选择
+        group: DEFAULT_GROUP
+        #类型(默认加载.properties)，默认指定查找nacos-config.yml
+        file-extension: yaml
+  #读取环境配置，指定环境后，还会加载nacos-config-prod.yml文件
+  profiles:
+    active: dev
+
Index: ../springcloud-zookeeper/.mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2007-present the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.nio.channels.*;\r\nimport java.util.Properties;\r\n\r\npublic class MavenWrapperDownloader {\r\n\r\n    private static final String WRAPPER_VERSION = \"0.5.6\";\r\n    /**\r\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\r\n     */\r\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\r\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\r\n\r\n    /**\r\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\r\n     * use instead of the default one.\r\n     */\r\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\r\n            \".mvn/wrapper/maven-wrapper.properties\";\r\n\r\n    /**\r\n     * Path where the maven-wrapper.jar will be saved to.\r\n     */\r\n    private static final String MAVEN_WRAPPER_JAR_PATH =\r\n            \".mvn/wrapper/maven-wrapper.jar\";\r\n\r\n    /**\r\n     * Name of the property which should be used to override the default download url for the wrapper.\r\n     */\r\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\r\n\r\n    public static void main(String args[]) {\r\n        System.out.println(\"- Downloader started\");\r\n        File baseDirectory = new File(args[0]);\r\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\r\n\r\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\r\n        // wrapperUrl parameter.\r\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\r\n        String url = DEFAULT_DOWNLOAD_URL;\r\n        if (mavenWrapperPropertyFile.exists()) {\r\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\r\n            try {\r\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\r\n                Properties mavenWrapperProperties = new Properties();\r\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\r\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\r\n            } catch (IOException e) {\r\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\r\n            } finally {\r\n                try {\r\n                    if (mavenWrapperPropertyFileInputStream != null) {\r\n                        mavenWrapperPropertyFileInputStream.close();\r\n                    }\r\n                } catch (IOException e) {\r\n                    // Ignore ...\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading from: \" + url);\r\n\r\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\r\n        if (!outputFile.getParentFile().exists()) {\r\n            if (!outputFile.getParentFile().mkdirs()) {\r\n                System.out.println(\r\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\r\n            }\r\n        }\r\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\r\n        try {\r\n            downloadFileFromURL(url, outputFile);\r\n            System.out.println(\"Done\");\r\n            System.exit(0);\r\n        } catch (Throwable e) {\r\n            System.out.println(\"- Error downloading\");\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\r\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\r\n            String username = System.getenv(\"MVNW_USERNAME\");\r\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\r\n            Authenticator.setDefault(new Authenticator() {\r\n                @Override\r\n                protected PasswordAuthentication getPasswordAuthentication() {\r\n                    return new PasswordAuthentication(username, password);\r\n                }\r\n            });\r\n        }\r\n        URL website = new URL(urlString);\r\n        ReadableByteChannel rbc;\r\n        rbc = Channels.newChannel(website.openStream());\r\n        FileOutputStream fos = new FileOutputStream(destination);\r\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\r\n        fos.close();\r\n        rbc.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-zookeeper/.mvn/wrapper/MavenWrapperDownloader.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-zookeeper/.mvn/wrapper/MavenWrapperDownloader.java	(date 1582528767190)
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-import java.net.*;
-import java.io.*;
-import java.nio.channels.*;
 import java.util.Properties;
 
 public class MavenWrapperDownloader {
Index: ../springcloud_nacos_client/src/main/java/com/thinkingcao/api/NacosController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.thinkingcao.api;\r\n\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @desc: 分布式配置中心自动刷新方式一\r\n * @auth: cao_wencao\r\n * @date: 2020/4/10 15:08\r\n */\r\n@Slf4j\r\n@RestController\r\n@RefreshScope\r\npublic class NacosController {\r\n\r\n    @Value(\"${user.name}\")\r\n    private String userName;\r\n\r\n\r\n    @GetMapping(\"/getConfig\")\r\n    public String getConfig() {\r\n        log.info(\"从nacos-server读取的数据=>>>>>： {}\", userName);\r\n        return userName;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud_nacos_client/src/main/java/com/thinkingcao/api/NacosController.java	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud_nacos_client/src/main/java/com/thinkingcao/api/NacosController.java	(date 1586580897063)
@@ -19,12 +19,10 @@
     @Value("${user.name}")
     private String userName;
 
-
     @GetMapping("/getConfig")
     public String getConfig() {
         log.info("从nacos-server读取的数据=>>>>>： {}", userName);
         return userName;
     }
 
-
 }
Index: ../springcloud-feign/springcloud-eureka-server/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#服务端口号\r\nserver:\r\n  port: 8000\r\n#定义服务名称(服务注册到eureka名称)\r\nspring:\r\n  application:\r\n    name: app-thinkingcao-eureka\r\neureka:\r\n  instance:\r\n    #Eureka注册中心ip地址\r\n    hostname: 127.0.0.1\r\n  client:\r\n    serviceUrl:\r\n      #注册地址\r\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\r\n    #表示是否需要将自己注册给自己的注册中心，因为自己是注册中心，单机版本时不需要，设置为false（集群的时候需要是为true）\r\n    register-with-eureka: false\r\n    #因为自己是注册中心，不需要去检索服务信息,单机版本时不需要，设置为false（集群的时候需要是为true）\r\n    fetch-registry: false\r\n  #Eureka自我保护机制\r\n  server:\r\n    #关闭eureka自我保护机制false（默认为true）\r\n    enable-self-preservation: false\r\n    # 清理间隔（单位毫秒，默认是60*1000）\r\n    eviction-interval-timer-in-ms: 2000
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud-feign/springcloud-eureka-server/src/main/resources/application.yml	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud-feign/springcloud-eureka-server/src/main/resources/application.yml	(date 1582384155475)
@@ -1,6 +1,6 @@
 #服务端口号
 server:
-  port: 8000
+  port: 9000
 #定义服务名称(服务注册到eureka名称)
 spring:
   application:
Index: ../springcloud_nacos_client/src/main/resources/bootstrap.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\r\n  application:\r\n    #对应Nacos Config中的Data ID，不是指服务名，实际服务应用名称以配置中心文件为准\r\n    name: nacos-config\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        #Nacos注册中心地址\r\n        server-addr: 127.0.0.1:8848 #,127.0.0.1:8849,127.0.0.1:8850\r\n        enabled: true\r\n      config:\r\n        #Nacos配置中心地址\r\n        server-addr: 127.0.0.1:8848 #,127.0.0.1:8849,127.0.0.1:8850\r\n        #分组选择\r\n        group: DEFAULT_GROUP\r\n        #类型(默认加载.properties)，默认指定查找nacos-config.yml\r\n        file-extension: yaml\r\n  #读取环境配置，指定环境后，还会加载nacos-config-prod.yml文件\r\n  profiles:\r\n    active: dev\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../springcloud_nacos_client/src/main/resources/bootstrap.yml	(revision 0a447147128e691f50c4f237992b58492ada5a29)
+++ ../springcloud_nacos_client/src/main/resources/bootstrap.yml	(date 1587026033298)
@@ -1,3 +1,5 @@
+server:
+  port: 8010
 spring:
   application:
     #对应Nacos Config中的Data ID，不是指服务名，实际服务应用名称以配置中心文件为准
@@ -6,11 +8,11 @@
     nacos:
       discovery:
         #Nacos注册中心地址
-        server-addr: 127.0.0.1:8848 #,127.0.0.1:8849,127.0.0.1:8850
+        server-addr: 130.252.102.241:8848 #,127.0.0.1:8849,127.0.0.1:8850
         enabled: true
       config:
         #Nacos配置中心地址
-        server-addr: 127.0.0.1:8848 #,127.0.0.1:8849,127.0.0.1:8850
+        server-addr: 130.252.102.241:8848 #,127.0.0.1:8849,127.0.0.1:8850
         #分组选择
         group: DEFAULT_GROUP
         #类型(默认加载.properties)，默认指定查找nacos-config.yml
